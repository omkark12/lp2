la1 
def dfs(visited,graph,node):
    if node not in visited:
        print(node,end = " ")
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

def bfs(visited,graph,node,queue):
    visited.add(node)
    queue.append(node)

    while queue:
        s = queue.pop(0)
        print(s,end = " ")
        for neighbour in graph[s]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

def main():
    visited1 = set() # TO keep track of DFS visited nodes
    visited2 = set() # TO keep track of BFS visited nodes
    queue = []       # For BFS
    n = int(input("Enter number of nodes : "))
    graph = dict()

    for i in range(1,n+1):
        edges = int(input("Enter number of edges for node {} : ".format(i)))
        graph[i] = list()
        for j in range(1,edges+1):
            node = int(input("Enter edge {} for node {} : ".format(j,i)))
            graph[i].append(node)

    print("The following is DFS")
    dfs(visited1, graph, 1)
    print()
    print("The following is BFS")
    bfs(visited2, graph, 1, queue)

if __name__=="__main__":
    main()

-----------
la5
def greet_user():
    name = input("Hello! Welcome to our restaurant. May I know your name please? ")
    return name

def offer_water():
    response = input("Hi {}, would you like some water? (Yes/No) ".format(name))
    if response.lower() == "yes":
        water_temperature = input("Great! Would you like it cold, hot, or lukewarm? ")
        print("Sure, I'll get you some {} water.".format(water_temperature))
    else:
        print("No problem, let's move on to food options.")

def offer_food():
    response = input("Now, let's move on to food. Are you interested in starters, Main course , or  Deserts? ")
    print("Okay, I'll note that down.")

def payment_options():
    response = input("Before we proceed, how would you like to pay the bill? Cash, card, or UPI? ")
    print("Got it! We'll process your payment through {}.".format(response))

def main():
    global name
    name = greet_user()
    offer_water()
    offer_food()
    payment_options()
    print("Thank you for your choices. Your order will be ready shortly. Enjoy your meal, {}!".format(name))

if __name__ == "__main__":
    main()
--------------------
la4 
import heapq

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def is_safe(self, v, color, c):
        for i in range(self.vertices):
            if self.graph[v][i] == 1 and color[i] == c:
                return False
        return True

    def graph_coloring_backtracking(self, color_set):
        color = [None] * self.vertices
        self.graph_coloring_util_backtracking(color_set, color, 0)

        num_colors_used = len(set(color))
        print("Minimum number of colors used (Backtracking):", num_colors_used)
        print("Graph coloring:")
        for i, c in enumerate(color):
            print("Vertex", i, "colored with:", c)

    def graph_coloring_util_backtracking(self, color_set, color, v):
        if v == self.vertices:
            return True

        for c in color_set:
            if self.is_safe(v, color, c):
                color[v] = c
                if self.graph_coloring_util_backtracking(color_set, color, v + 1):
                    return True
                color[v] = None

    def graph_coloring_branch_and_bound(self, color_set):
        def bound(v):
            max_used_color = max(color[:v]) if v > 0 else 0
            return max_used_color

        def _graph_coloring():
            # Priority queue to store (coloring, vertex) pairs based on the number of used colors
            pq = [(0, [-1] * self.vertices)]

            while pq:
                used_colors, coloring = heapq.heappop(pq)

                # Find the next vertex to color
                v = coloring.index(-1) if -1 in coloring else self.vertices
                if v == self.vertices:
                    return coloring

                for c in color_set:
                    if self.is_safe(v, coloring, c):
                        new_coloring = list(coloring)
                        new_coloring[v] = c
                        heapq.heappush(pq, (used_colors + 1, new_coloring))

        coloring = _graph_coloring()
        num_colors_used = len(set(coloring))
        print("Minimum number of colors used (Branch and Bound):", num_colors_used)
        print("Graph coloring:")
        for i, c in enumerate(coloring):
            print("Vertex", i, "colored with:", c)


def main():
    vertices = int(input("Enter the number of vertices in the graph: "))
    g = Graph(vertices)

    print("Enter the adjacency matrix of the graph:")
    for i in range(vertices):
        row = list(map(int, input().split()))
        for j in range(vertices):
            g.graph[i][j] = row[j]
    while(True): 
            
            print("\nSelect the method to solve the graph coloring problem:")
            print("1. Backtracking")
            print("2. Branch and Bound")
            choice = input("Enter your choice (1 or 2): ")
        
            if choice == '1':
                color_set = input("Enter the set of colors separated by space: ").split()
                g.graph_coloring_backtracking(color_set)
            elif choice == '2':
                color_set = input("Enter the set of colors separated by space: ").split()   
                g.graph_coloring_branch_and_bound(color_set)
            else:
                print("Invalid choice. Please enter '1' or '2'.")
                
            char = input("Do you wannna stop? (yes)")
            if(char == "yes"):
                break
        
if __name__ == "__main__":
    main()

------------------------
job

class Job:
    def __init__(self,id,profit,deadline):
        self.id = id
        self.profit= profit
        self.deadline = deadline
def get_max_deadline(jobs):
    max_deadline = 0
    for job in jobs:
        max_deadline = max(max_deadline,job.deadline)
    return max_deadline

def schedule_jobs(jobs,scheduled_jobs):
    jobs.sort(key = lambda x:x.profit,reverse = True)
    for job in jobs:
        for j in range(job.deadline-1,-1,-1):
            if scheduled_jobs[j] is None:
                scheduled_jobs[j]=job
                break

def caclutale_total_profit(jobs):
    total_profit=0
    for job in jobs:
        if job is not None:
            total_profit+=job.profit
    return total_profit

def main():
    n = int(input("Enter the number of jobs: "))
    jobs = []

    for i in range(n):
        print(f"Enter details for job {i + 1}:")
        id = int(input("ID: "))
        deadline = int(input("Deadline: "))
        profit = int(input("Profit: "))
        jobs.append(Job(id, deadline, profit))

    max_deadline = get_max_deadline(jobs)
    scheduled_jobs = [None] * max_deadline

    schedule_jobs(jobs, scheduled_jobs)

    total_profit = caclutale_total_profit(scheduled_jobs)

    print("Scheduled Jobs: ")
    for job in scheduled_jobs:
        if job is not None:
            print(f"Job ID: {job.id}, Deadline: {job.deadline}, Profit: {job.profit}")
    print("Total Profit:", total_profit)

if __name__ == "__main__":
    main()
    
------------------------
sel sort 
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i+1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

n = int(input('Enter no of elements'))
arr = []
for i in range(n):
    arr.append(int(input()))
sorted_arr = selection_sort(arr)
print("Sorted array:", sorted_arr)

--------------------------------------
kruskal
class DisjointSet:
    def __init__(self):
        self.parent = {}
        self.rank = {}

    def make_set(self, vertex):
        self.parent[vertex] = vertex
        self.rank[vertex] = 0

    def find(self, vertex):
        if self.parent[vertex] != vertex:
            self.parent[vertex] = self.find(self.parent[vertex])
        return self.parent[vertex]

    def union(self, vertex1, vertex2):
        root1 = self.find(vertex1)
        root2 = self.find(vertex2)
        if root1 != root2:
            if self.rank[root1] > self.rank[root2]:
                self.parent[root2] = root1
            else:
                self.parent[root1] = root2
                if self.rank[root1] == self.rank[root2]:
                    self.rank[root2] += 1


def kruskal_mst(graph):
    disjoint_set = DisjointSet()
    mst = []
    edges = sorted((weight, u, v) for u in graph for v, weight in graph[u].items())

    for vertex in graph:
        disjoint_set.make_set(vertex)

    for weight, u, v in edges:
        if disjoint_set.find(u) != disjoint_set.find(v):
            disjoint_set.union(u, v)
            mst.append((u, v, weight))

    return mst


def take_input():
    graph = {}
    for _ in range(int(input("Enter the number of edges: "))):
        u, v, w = input("Enter edge (source destination weight): ").split()
        w = int(w)
        graph.setdefault(u, {})[v] = w
        graph.setdefault(v, {})[u] = w
    return graph


graph = take_input()
mst = kruskal_mst(graph)
print("Minimum Spanning Tree (Kruskal's Algorithm):", mst)

Enter the number of edges:  10
Enter edge (source destination weight):  a b 6
Enter edge (source destination weight):  a g 15
Enter edge (source destination weight):  b c 11
Enter edge (source destination weight):  g c 25
Enter edge (source destination weight):  b d 5
Enter edge (source destination weight):  g f 12
Enter edge (source destination weight):  c d 17
Enter edge (source destination weight):  c f 9
Enter edge (source destination weight):  d e 22
Enter edge (source destination weight):  f e 10

-------------------------------------------------------
dikstras

import heapq

def dijkstra_mst(graph, source):
    mst = []
    visited = set()
    distances = {vertex: float('inf') for vertex in graph}
    distances[source] = 0
    pq = [(0, source, None)]  # (distance, vertex, parent)

    while pq:
        dist, current_vertex, parent = heapq.heappop(pq)
        if current_vertex in visited:
            continue
        visited.add(current_vertex)
        if parent is not None:
            mst.append((parent, current_vertex, dist))
        for neighbor, weight in graph[current_vertex].items():
            if neighbor not in visited:
                heapq.heappush(pq, (weight, neighbor, current_vertex))
                distances[neighbor] = min(distances[neighbor], weight)

    return mst

# Example graph represented as an adjacency list
graph = {
    'A': {'B': 4, 'C': 2},
    'B': {'A': 4, 'C': 5, 'D': 10},
    'C': {'A': 2, 'B': 5, 'D': 3},
    'D': {'B': 10, 'C': 3}
}

source_vertex = 'A'
minimum_spanning_tree = dijkstra_mst(graph, source_vertex)
print("Minimum Spanning Tree (Dijkstra's Algorithm):", minimum_spanning_tree)

----------------- 
prims

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.vertices_dict = {}
        self.graph = [[] for _ in range(vertices)]

    def add_edge(self, u, v, w):
        u_index = self.get_vertex_index(u)
        v_index = self.get_vertex_index(v)
        self.graph[u_index].append((v_index, w))
        self.graph[v_index].append((u_index, w))

    def get_vertex_index(self, vertex):
        if vertex not in self.vertices_dict:
            index = len(self.vertices_dict)
            self.vertices_dict[vertex] = index
            return index
        return self.vertices_dict[vertex]

    def prim_mst(self):
        visited = [False] * self.V
        key = [float('inf')] * self.V
        parent = [-1] * self.V
        key[0] = 0

        for _ in range(self.V):
            u = self.min_key(key, visited)
            visited[u] = True
            for v, weight in self.graph[u]:
                if not visited[v] and weight < key[v]:
                    key[v] = weight
                    parent[v] = u

        mst_edges = [(self.get_vertex_name(parent[i]), self.get_vertex_name(i), key[i]) for i in range(1, self.V)]
        return mst_edges, sum(key[1:])

    def min_key(self, key, visited):
        min_val = float('inf')
        min_index = -1
        for v in range(self.V):
            if not visited[v] and key[v] < min_val:
                min_val = key[v]
                min_index = v
        return min_index

    def get_vertex_name(self, index):
        for name, idx in self.vertices_dict.items():
            if idx == index:
                return name


def take_input():
    vertices = int(input("Enter the number of vertices: "))
    edges = int(input("Enter the number of edges: "))
    g = Graph(vertices)
    print("Enter edges in the format 'source destination weight': ")
    for _ in range(edges):
        u, v, w = input().split()
        g.add_edge(u, v, int(w))
    return g


print("Enter graph details:")
graph = take_input()
mst_edges, total_cost = graph.prim_mst()
print("Minimum Spanning Tree edges using Prim's algorithm:")
for edge in mst_edges:
    print(edge)
print("Total cost of Minimum Spanning Tree:", total_cost)


Enter graph details:
Enter the number of vertices:  6
Enter the number of edges:  10
Enter edges in the format 'source destination weight': 
 s a 12
 s b 8
 a b 9
 a c 22
 a e 11
 b e 14
 b c 16
 c e 18
 c d 15
 e d 3
Minimum Spanning Tree edges using Prim's algorithm:
('b', 'a', 9)
('s', 'b', 8)
('d', 'c', 15)
('a', 'e', 11)
('e', 'd', 3)
Total cost of Minimum Spanning Tree: 46


